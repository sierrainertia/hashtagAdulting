{"version":3,"sources":["ListItem.js","ToDoList.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","checkBoxClassName","this","props","checked","onClick","itemChecked","className","type","id","onChange","htmlFor","listItemText","Component","ToDoList","handleChange","event","setState","userInput","target","value","handleClick","preventDefault","state","alert","itemAdded","listHeader","onSubmit","addItem","inputId","placeholder","placeHolder","aria-label","required","listItems","map","listItem","index","text","key","removeListItems","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","login","provider","auth","GoogleAuthProvider","signInWithPopup","then","result","user","userId","uid","loggedIn","logout","signOut","podcastList","contactItemAdded","newItem","contactList","errandItemAdded","errandList","contactItemChecked","listCopy","errandItemChecked","getGiphyImage","axios","method","url","dataResponse","response","imageUrl","data","image_url","title","setTimeout","window","scrollTo","top","document","body","scrollHeight","behavior","giphy","checkList","onAuthStateChanged","checklistItemChecked","src","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wRAuCeA,E,uKA1BX,IAAIC,EAMJ,OAJEA,EADEC,KAAKC,MAAMC,QACO,uBAEA,iBAGpB,4BACE,0BACEC,QAASH,KAAKC,MAAMG,YACpBC,UAAWN,IAEb,2BACEO,KAAK,WACLC,GAAIP,KAAKC,MAAMM,GACfL,QAASF,KAAKC,MAAMC,QACpBG,UAAU,iBACVG,SAAUR,KAAKC,MAAMG,cAGvB,2BAAOK,QAAST,KAAKC,MAAMM,IAAKP,KAAKC,MAAMS,mB,GA/B5BC,aC6FRC,E,kDA1Fb,aAAe,IAAD,8BACZ,gBAMFC,aAAe,SAACC,GAEd,EAAKC,SAAS,CAEZC,UAAWF,EAAMG,OAAOC,SAXd,EAgBdC,YAAc,SAACL,GAEbA,EAAMM,iBACuB,KAAzB,EAAKC,MAAML,UACbM,MACE,iGAGF,EAAKrB,MAAMsB,UAAU,EAAKF,MAAML,WAIhC,EAAKD,SAAS,CACZC,UAAW,OA3Bf,EAAKK,MAAQ,CACXL,UAAW,IAHD,E,qDAuCJ,IAAD,OACP,OACE,6BAASX,UAAS,mBAAcL,KAAKC,MAAMI,YACzC,4BAAKL,KAAKC,MAAMuB,YAGhB,0BAAMC,SAAUzB,KAAK0B,SACnB,2BACEjB,QAAST,KAAKC,MAAM0B,QACpBtB,UAAU,mBAGZ,2BACEE,GAAIP,KAAKC,MAAM0B,QACfrB,KAAK,OACLsB,YAAa5B,KAAKC,MAAM4B,YACxBC,aAAY9B,KAAKC,MAAM4B,YACvBX,MAAOlB,KAAKqB,MAAML,UAClBR,SAAUR,KAAKa,aACfkB,UAAQ,IAGV,4BAAQ1B,UAAU,aAAaF,QAASH,KAAKmB,aAA7C,cAKF,4BAEGnB,KAAKC,MAAM+B,UAAUC,KAAI,SAACC,EAAUC,GACnC,OACE,kBAAC,EAAD,CACE5B,GAAI2B,EAASE,KAAO,EAAKnC,MAAM0B,QAAUQ,EACzCE,IAAKF,EACLzB,aAAcwB,EAASE,KACvBlC,QAASgC,EAAShC,QAClBE,YAAa,kBAAM,EAAKH,MAAMG,YAAY+B,UAKlD,6BACE,4BAAQ9B,UAAU,QAAQF,QAASH,KAAKsC,iBAAxC,oB,GAnFa3B,a,qDCYvB4B,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,8CAKMR,QAAf,EC8NeS,E,kDAvOb,aAAe,IAAD,8BACZ,gBAYFC,MAAQ,WACN,IAAMC,EAAW,IAAIX,EAASY,KAAKC,mBACtBb,EAASY,OAEjBE,gBAAgBH,GAAUI,MAAK,SAACC,GACnC,IAAMC,EAAOD,EAAOC,KACpB,EAAKzC,SAAS,CACZ0C,OAAQD,EAAKE,IACbC,UAAU,QArBF,EA2BdC,OAAS,WACMrB,EAASY,OACjBU,UAAUP,MAAK,WAClB,EAAKvC,SAAS,CACZ0C,OAAQ,GACRK,YAAa,GACbH,UAAU,QAjCF,EAsCdI,iBAAmB,SAACC,GAClB,EAAKjD,SAAS,CACZkD,YAAY,GAAD,mBACN,EAAK5C,MAAM4C,aADL,CAET,CACE7B,KAAM4B,EACN9D,SAAS,QA5CH,EAkDdgE,gBAAkB,SAACF,GACjB,EAAKjD,SAAS,CACZoD,WAAW,GAAD,mBACL,EAAK9C,MAAM8C,YADN,CAER,CACE/B,KAAM4B,EACN9D,SAAS,QAxDH,EA8DdkE,mBAAqB,SAACjC,GAEpB,IAAMkC,EAAW,EAAKhD,MAAM4C,YAG5BI,EAASlC,GAAOjC,SAAWmE,EAASlC,GAAOjC,QAG3C,EAAKa,SAAS,CACZkD,YAAaI,KAvEH,EA2EdC,kBAAoB,SAACnC,GAEnB,IAAMkC,EAAW,EAAKhD,MAAM8C,WAG5BE,EAASlC,GAAOjC,SAAWmE,EAASlC,GAAOjC,QAG3C,EAAKa,SAAS,CACZoD,WAAYE,KApFF,EA6GdE,cAAgB,WAEdC,IAAM,CACJC,OAAQ,MACRC,IACE,2GACFC,aAAc,SACbrB,MAAK,SAACsB,GACP,EAAK7D,SAAS,CACZ8D,SAAUD,EAASE,KAAKA,KAAKC,UAC7BC,MAAOJ,EAASE,KAAKA,KAAKE,QAG5BC,YAAW,WAGTC,OAAOC,SAAS,CACdC,IAAKC,SAASC,KAAKC,aACnBC,SAAU,aAEX,QA/HL,EAAKnE,MAAQ,CACXoE,MAAO,GACPhC,OAAQ,YACRE,UAAU,EACVM,YAAa,GACbE,WAAY,GACZuB,UAAW,IARD,E,gEA0FO,IAAD,OACLnD,EAASY,OAGjBwC,oBAAmB,SAACnC,GACnBA,GACF,EAAKzC,SAAS,CACZ4C,UAAU,IAKd,EAAK5C,SAAS,CACZ0C,OAAQD,EAAKE,IACbC,UAAU,S,+BA8Bd,OACE,yBAAKtD,UAAU,OACb,gCACE,yBAAKA,UAAU,WACb,yBAAKA,UAAU,cACb,gDACCL,KAAKqB,MAAMoC,OACV,4BAAQpD,UAAU,WAAWF,QAASH,KAAK4D,QAA3C,WAIA,4BAAQvD,UAAU,YAAYF,QAASH,KAAKiD,OAA5C,WAKJ,wIAIA,2BACE,0BAAM5C,UAAU,YAAhB,UADF,8FAMJ,8BACE,yBAAKA,UAAU,WAEb,yBAAKA,UAAU,cAEb,kBAAC,EAAD,CACEA,UAAU,kBACVmB,WAAW,yCACXK,YAAY,kBACZF,QAAQ,UACRK,UAAWhC,KAAKqB,MAAM4C,YACtB1C,UAAWvB,KAAK+D,iBAChB3D,YAAaJ,KAAKoE,qBAGpB,yBAAK/D,UAAU,aACb,gDACA,4BACE,kBAAC,EAAD,CACEE,GAAG,QACHG,aAAa,WACbN,YAAaJ,KAAK4F,uBAEpB,kBAAC,EAAD,CACErF,GAAG,QACHG,aAAa,kCAEf,kBAAC,EAAD,CAAUH,GAAG,QAAQG,aAAa,oBAClC,kBAAC,EAAD,CACEH,GAAG,QACHG,aAAa,gCAEf,kBAAC,EAAD,CACEH,GAAG,QACHG,aAAa,oCAMrB,kBAAC,EAAD,CACEL,UAAU,iBACVmB,WAAW,mCACXK,YAAY,oBACZF,QAAQ,SACRK,UAAWhC,KAAKqB,MAAM8C,WACtB5C,UAAWvB,KAAKkE,gBAChB9D,YAAaJ,KAAKsE,oBAIpB,6BAASjE,UAAU,cACjB,4BAAQF,QAASH,KAAKuE,cAAelE,UAAU,cAA/C,2BAGA,yBAAKA,UAAU,mBACb,yBAAKwF,IAAK7F,KAAKqB,MAAMwD,SAAUiB,IAAK9F,KAAKqB,MAAM2D,YAKvD,gCACE,yBAAK3E,UAAU,WACb,+F,GAhOMM,aCKEoF,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3d59d44f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass ListItem extends Component {\n  // handleClick = () => {\n  //   if (this.state.checked === false) {\n  //     this.setState({\n  //       checked: true,\n  //     });\n  //   } else {\n  //     this.setState({ checked: false });\n  //   }\n  // };\n  render() {\n    let checkBoxClassName;\n    if (this.props.checked) {\n      checkBoxClassName = \"fa fa-check-square-o\";\n    } else {\n      checkBoxClassName = \"fa fa-square-o\";\n    }\n    return (\n      <li>\n        <span\n          onClick={this.props.itemChecked}\n          className={checkBoxClassName}\n        ></span>\n        <input\n          type=\"checkbox\"\n          id={this.props.id}\n          checked={this.props.checked}\n          className=\"visuallyHidden\"\n          onChange={this.props.itemChecked}\n        />\n\n        <label htmlFor={this.props.id}>{this.props.listItemText}</label>\n      </li>\n    );\n  }\n}\n\nexport default ListItem;\n","import React, { Component } from \"react\";\nimport ListItem from \"./ListItem\";\n\nclass ToDoList extends Component {\n  // use constructor to define state and create empty array list\n  constructor() {\n    super();\n    this.state = {\n      userInput: \"\",\n    };\n  }\n\n  handleChange = (event) => {\n    // update state to contain what user types\n    this.setState({\n      // putting users input in userInput .target defines where the information is coming from\n      userInput: event.target.value,\n    });\n  };\n\n  // Create addItem function to add item to list\n  handleClick = (event) => {\n    //prevent page from refreshing\n    event.preventDefault();\n    if (this.state.userInput === \"\") {\n      alert(\n        \"Please type something! We know there are plenty of tasks you have been avoiding ðŸ‘€\"\n      );\n    } else {\n      this.props.itemAdded(this.state.userInput);\n      // const dbRef = this.props.listItems;\n      // dbRef.push(this.state.userInput);\n\n      this.setState({\n        userInput: \"\",\n      });\n    }\n  };\n\n  // add clear list functionality\n  // removeListItems = (event) => {\n  //   this.setState({ list: [] });\n  // };\n\n  render() {\n    return (\n      <section className={`toDoList ${this.props.className}`}>\n        <h2>{this.props.listHeader}</h2>\n        {/* // create form for user to add tasks // use .addItem method to add item\n        to list on submit */}\n        <form onSubmit={this.addItem}>\n          <label\n            htmlFor={this.props.inputId}\n            className=\"visuallyhidden\"\n          ></label>\n\n          <input\n            id={this.props.inputId}\n            type=\"text\"\n            placeholder={this.props.placeHolder}\n            aria-label={this.props.placeHolder}\n            value={this.state.userInput}\n            onChange={this.handleChange}\n            required\n          ></input>\n\n          <button className=\"mainButton\" onClick={this.handleClick}>\n            Add Task!\n          </button>\n        </form>\n\n        <ul>\n          {/* maping through state to render list items */}\n          {this.props.listItems.map((listItem, index) => {\n            return (\n              <ListItem\n                id={listItem.text + this.props.inputId + index}\n                key={index}\n                listItemText={listItem.text}\n                checked={listItem.checked}\n                itemChecked={() => this.props.itemChecked(index)}\n              />\n            );\n          })}\n        </ul>\n        <div>\n          <button className=\"clear\" onClick={this.removeListItems}>\n            clear list\n          </button>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default ToDoList;\n","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAOfgprX8xl2vbM0KJm8e8quH9m18-C_HU\",\n  authDomain: \"hashtagadulting-2e8db.firebaseapp.com\",\n  databaseURL: \"https://hashtagadulting-2e8db.firebaseio.com\",\n  projectId: \"hashtagadulting-2e8db\",\n  storageBucket: \"hashtagadulting-2e8db.appspot.com\",\n  messagingSenderId: \"458284744572\",\n  appId: \"1:458284744572:web:0769978abefc72cc65eef9\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from \"react\";\nimport ToDoList from \"./ToDoList\";\nimport \"./app.css\";\nimport axios from \"axios\";\nimport firebase from \"./firebase\";\nimport ListItem from \"./ListItem\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      giphy: [],\n      userId: \"anonymous\",\n      loggedIn: false,\n      contactList: [],\n      errandList: [],\n      checkList: [],\n    };\n  }\n\n  // Login method for Google Authentication\n  login = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const auth = firebase.auth();\n\n    auth.signInWithPopup(provider).then((result) => {\n      const user = result.user;\n      this.setState({\n        userId: user.uid,\n        loggedIn: true,\n      });\n    });\n  };\n\n  // Logout method for Google Authentication\n  logout = () => {\n    const auth = firebase.auth();\n    auth.signOut().then(() => {\n      this.setState({\n        userId: \"\",\n        podcastList: [],\n        loggedIn: false,\n      });\n    });\n  };\n\n  contactItemAdded = (newItem) => {\n    this.setState({\n      contactList: [\n        ...this.state.contactList,\n        {\n          text: newItem,\n          checked: false,\n        },\n      ],\n    });\n  };\n\n  errandItemAdded = (newItem) => {\n    this.setState({\n      errandList: [\n        ...this.state.errandList,\n        {\n          text: newItem,\n          checked: false,\n        },\n      ],\n    });\n  };\n\n  contactItemChecked = (index) => {\n    //  create copy of contact list\n    const listCopy = this.state.contactList;\n\n    // setting indexed item of list copy to checked is true\n    listCopy[index].checked = !listCopy[index].checked;\n\n    // save list back to state\n    this.setState({\n      contactList: listCopy,\n    });\n  };\n\n  errandItemChecked = (index) => {\n    //  create copy of contact list\n    const listCopy = this.state.errandList;\n\n    // setting indexed item of list copy to checked is true\n    listCopy[index].checked = !listCopy[index].checked;\n\n    // save list back to state\n    this.setState({\n      errandList: listCopy,\n    });\n  };\n\n  // add persistent login\n  // componentDidMount method\n  componentDidMount() {\n    const auth = firebase.auth();\n\n    // Check to see if the user was already logged in and set the state again\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({\n          loggedIn: true,\n        });\n      }\n\n      // Set the userId state again\n      this.setState({\n        userId: user.uid,\n        loggedIn: true,\n      });\n    });\n  }\n  // Get motivational giphy with axios\n  getGiphyImage = () => {\n    // make API call to get motivational giphy\n    axios({\n      method: \"GET\",\n      url:\n        \"https://api.giphy.com/v1/gifs/random?api_key=KMdcSvJCsU4GSHGjdYnTVOfeQkyqAIJ9&tag=motivational&rating=pg\",\n      dataResponse: \"json\",\n    }).then((response) => {\n      this.setState({\n        imageUrl: response.data.data.image_url,\n        title: response.data.data.title,\n      });\n      // wait so image has a chance to load\n      setTimeout(() => {\n        // got this from: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo\n        // scroll to bottom of page when giphy appears to see full image on screen\n        window.scrollTo({\n          top: document.body.scrollHeight,\n          behavior: \"smooth\",\n        });\n      }, 50);\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"wrapper\">\n            <div className=\"titleLogin\">\n              <h1>Hashtag Adulting</h1>\n              {this.state.userId ? (\n                <button className=\"loggedIn\" onClick={this.logout}>\n                  Log Out\n                </button>\n              ) : (\n                <button className=\"loggedOut\" onClick={this.login}>\n                  Log In\n                </button>\n              )}\n            </div>\n            <p>\n              Use this app to record all your tedius adult tasks. Click the \"I\n              need motivation\" to get some motivation!\n            </p>\n            <p>\n              <span className=\"remember\">Note: </span>You can log in using your\n              google account and save your chores using the 'Log in' button.\n            </p>\n          </div>\n        </header>\n        <main>\n          <div className=\"wrapper\">\n            {/* Top Section */}\n            <div className=\"topSection\">\n              {/* contact to do list section */}\n              <ToDoList\n                className=\"contactToDoList\"\n                listHeader=\"People I need to contact, reluctantly:\"\n                placeHolder=\"Type in someone\"\n                inputId=\"contact\"\n                listItems={this.state.contactList}\n                itemAdded={this.contactItemAdded}\n                itemChecked={this.contactItemChecked}\n              />\n              {/* daily checklist section */}\n              <div className=\"checkList\">\n                <h2>Daily CheckList:</h2>\n                <ul>\n                  <ListItem\n                    id=\"item1\"\n                    listItemText=\"Showered\"\n                    itemChecked={this.checklistItemChecked}\n                  />\n                  <ListItem\n                    id=\"item2\"\n                    listItemText=\"Took vitamins (gummies count)\"\n                  />\n                  <ListItem id=\"item3\" listItemText=\"Ate a vegetable\" />\n                  <ListItem\n                    id=\"item4\"\n                    listItemText=\"Didn't set anything on fire\"\n                  />\n                  <ListItem\n                    id=\"item5\"\n                    listItemText=\"Didn't eat cereal for dinner\"\n                  />\n                </ul>\n              </div>\n            </div>\n            {/* errand to do list */}\n            <ToDoList\n              className=\"errandToDoList\"\n              listHeader=\"Errands I cannot ignore anymore:\"\n              placeHolder=\"Type in an errand\"\n              inputId=\"errand\"\n              listItems={this.state.errandList}\n              itemAdded={this.errandItemAdded}\n              itemChecked={this.errandItemChecked}\n            />\n\n            {/* Motivation giphy section */}\n            <section className=\"motivation\">\n              <button onClick={this.getGiphyImage} className=\"mainButton\">\n                I need some motivation!\n              </button>\n              <div className=\"motivationImage\">\n                <img src={this.state.imageUrl} alt={this.state.title} />\n              </div>\n            </section>\n          </div>\n        </main>\n        <footer>\n          <div className=\"wrapper\">\n            <p>Copyright&copy; Sierra MacDonald | Created at Juno College </p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}