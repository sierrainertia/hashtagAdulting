{"version":3,"sources":["ListItem.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","handleClick","state","checked","setState","checkBoxClassName","this","onClick","className","props","listItemText","Component","ToDoList","handleChange","event","userInput","target","value","preventDefault","list","push","listHeader","onSubmit","addItem","for","inputId","id","type","placeholder","placeHolder","aria-label","onChange","map","listItem","index","key","App","getGiphyImage","axios","method","url","dataResponse","then","response","console","log","imageUrl","data","image_url","title","giphy","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b2b4daff.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\n\nclass ListItem extends Component {\n  constructor() {\n    super();\n    this.state = {\n      checked: false,\n    };\n  }\n\n  handleClick = () => {\n    if (this.state.checked === false) {\n      this.setState({\n        checked: true,\n      });\n    } else {\n      this.setState({ checked: false });\n    }\n  };\n  render() {\n    let checkBoxClassName;\n    if (this.state.checked) {\n      checkBoxClassName = \"fa fa-check-square-o\";\n    } else {\n      checkBoxClassName = \"fa fa-square-o\";\n    }\n    return (\n      <li onClick={this.handleClick}>\n        <span className={checkBoxClassName}></span>\n        {this.props.listItemText}\n      </li>\n    );\n  }\n}\n\nexport default ListItem;\n","import React, { Component } from \"react\";\nimport ListItem from \"./ListItem\";\n\nclass ToDoList extends Component {\n  // use constructor to define state and create empty array list\n  constructor() {\n    super();\n    this.state = {\n      list: [],\n      userInput: \"\",\n    };\n  }\n\n  handleChange = (event) => {\n    // update state to contain what user types\n    this.setState({\n      // putting users input in userInput .target defines where the information is coming from\n      userInput: event.target.value,\n    });\n  };\n\n  // Create addItem function to add item to list\n  handleClick = (event) => {\n    //prevent page from refreshing\n    event.preventDefault();\n\n    const dbRef = this.state.list;\n    dbRef.push(this.state.userInput);\n\n    // Set state to with new list value(s)\n    this.setState({\n      userInput: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <section className={`toDoList ${this.props.className}`}>\n        <h2>{this.props.listHeader}</h2>\n        {/* // create form for user to add tasks // use .addItem method to add item\n        to list on submit */}\n        <form onSubmit={this.addItem}>\n          <label for={this.props.inputId} className=\"visuallyhidden\"></label>\n          <input\n            id={this.props.inputId}\n            type=\"text\"\n            placeholder={this.props.placeHolder}\n            aria-label={this.props.placeHolder}\n            value={this.state.userInput}\n            onChange={this.handleChange}\n          ></input>\n          <button onClick={this.handleClick}>Add Task!</button>\n        </form>\n        <ul>\n          {/* maping through state to render list items */}\n          {this.state.list.map((listItem, index) => {\n            return <ListItem key={index} listItemText={listItem} />;\n          })}\n        </ul>\n      </section>\n    );\n  }\n}\n\nexport default ToDoList;\n","import React, { Component } from \"react\";\nimport ToDoList from \"./ToDoList\";\nimport \"./app.css\";\nimport axios from \"axios\";\nimport ListItem from \"./ListItem\";\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      giphy: [],\n    };\n  }\n\n  getGiphyImage = () => {\n    // make API call to get motivational giphy\n    axios({\n      method: \"GET\",\n      url:\n        \"https://api.giphy.com/v1/gifs/random?api_key=KMdcSvJCsU4GSHGjdYnTVOfeQkyqAIJ9&tag=motivational&rating=pg\",\n      dataResponse: \"json\",\n    }).then((response) => {\n      console.log(response);\n      this.setState({\n        imageUrl: response.data.data.image_url,\n        title: response.data.data.title,\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"wrapper\">\n            <h1>Hashtag Adulting</h1>\n            <p>Use this app to record all your tedius adult tasks.</p>\n            <p>\n              <span className=\"remember\">Remember: </span>The best time to do\n              something you don't want to do is yesterday.\n            </p>\n          </div>\n        </header>\n        <main>\n          <div className=\"wrapper\">\n            {/* To do list sections */}\n            <div className=\"topSection\">\n              <ToDoList\n                className=\"callToDoList\"\n                listHeader=\"People I need to contact, reluctantly:\"\n                placeHolder=\"Type in someone\"\n                inputId=\"call\"\n              />\n              <div className=\"checkList\">\n                <h2>Daily CheckList:</h2>\n                <ul>\n                  <ListItem listItemText=\"Showered\" />\n                  <ListItem listItemText=\"Took vitamins (gummies count)\" />\n                  <ListItem listItemText=\"Ate a vegetable\" />\n                  <ListItem listItemText=\"Didn't set anything on fire\" />\n                  <ListItem listItemText=\"Didn't eat cereal for dinner\" />\n                </ul>\n              </div>\n            </div>\n            <ToDoList\n              className=\"errandToDoList\"\n              listHeader=\"Errands I cannot ignore anymore:\"\n              placeHolder=\"Type in an errand\"\n              inputId=\"errand\"\n            />\n\n            {/* Motivation giphy section */}\n            <section className=\"motivation\">\n              <button onClick={this.getGiphyImage}>\n                I need some motivation!\n              </button>\n              <div className=\"motivationImage\">\n                <img src={this.state.imageUrl} alt={this.state.title} />\n              </div>\n            </section>\n          </div>\n        </main>\n        <footer>\n          <div className=\"wrapper\">\n            <p>Copyright&copy; Sierra MacDonald | Created at Juno College </p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}